/* Either get the developer job or die trying
i wont be alive as a loser NO WAY!!! */

/* DRY principal in coding 
Dont repeat yourself */
/* In object oriented css we seperate
structure from skin
- The skin includes color of the text and
background color 
- The structure includes the structural 
codes */

/* Step 1 define the colour pallete of this site. */
:root{
    --color-primary: #2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400;
    --color-headings: #1b0760;
    --color-body: #918ca4;
    --color-border: #ccc;
    --border-radius: 30px;
    --color-body-darker:  #5c5577;
}


/* we select all elements, and all elements which are inserted
after and before them, and we set the box-sizing to border box
*/
*, 
*::after, 
*::before {
box-sizing: border-box;
}

/* Step 2 define the typography of this site */
/* text colour, font-family, font-size 
of the body, heading elements */

html{
    /* 62.5% of 16px = 10px */
    font-size: 62.5%;
}

body{
    font-family: Inter, Arial, Helvetica, sans-serif;
    color: var(--color-body);
    font-size: 2.4rem;
    line-height: 1.5;
}

h1, h2, h3 {
    color: var(--color-headings);
    margin-bottom: 1rem;
}

h1{
    font-size: 7rem;
}

h2{
    font-size: 4rem;
}

h3{
    font-size: 3rem;
}

p{
    margin-top: 0;
}

/* we start building the website 
focusing on mobile, then we write 
media queries for 768px (tablets)
and then 1024px (desktop) */

/* Font-sizes are larger for mobile 
screens, and font sizes are smaller for 
tablet and desktop screens, 
(idea, here is as the screen gets larger, 
more content can fit in
so the font size gets smaller) */

@media screen and (min-width: 1024px){
body{
    font-size: 1.8rem;

}

h1{
    font-size: 8rem;
}

h2{
    font-size: 4rem;
}

h3{
    font-size: 2.4rem;
}
}

/* good thing,
 no one would ever have a problem if 
we reused these codes anywhere else */


/* Step 3 */
/* Complete a component of the site */
/* The links component */

a{
    text-decoration: none;
}

.link{
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight: bold;
    padding: .9rem;
    border-radius: 2rem;
}     

.link:hover{
    color: black;
    background-color: var(--color-accent);
    border-radius: 2rem;
    transition: 0.3s;
   padding: .9rem;

}

@media screen and (min-width:1024px) {
    .link{
        font-size: 1.5rem;
        
    }
}

/* Step 4 */
/* Focusing on another component */
/* the badge component */

/* in web development, see the smallest
thing you can build in the site, then 
start from there... */

/* what gives us the exact values for 
font sizes, padding, margin, is 
EXPERIMENTATION... JUST EXPERIMENT YOURSELF
AND FIND IT. THATS IT. */


/* this is the structure of the badge */
.badge{
    border-radius: 20px;
    padding: .5rem 2rem;
    font-weight: bold;
    white-space: nowrap;
    font-size: 2rem;
}

/* These are the skins */
.badge--primary{
    background: var(--color-primary);
    color: #fff;
}

.badge--secondary{
    background: var(--color-secondary);
    color: #fff;
}

.badge--small{
    font-size: 1.6rem;
    padding: .5rem 1.5rem;
}

/* this is the media query */
@media screen and (min-width: 1024px) {
    .badge{
        font-size: 1.5rem;

    }

    .badge--small{
        font-size: 1.2rem;
    }
}

/* step 5 List component */
/* - setting the list style to none, 
gets rid of the default bullet points */

/* - padding left we set to zero 
to get rid of the padding which all browsers 
are applied to by default */

.list{
    list-style: none;
    padding-left: 0;
    color: var(--color-headings);
}

/* this means, if we have a list item
inside the list--inline we want to display
it as inline-block, 
(if we set this to inline only 
we wont be able to give it margin) */
.list--inline .list__item{
    display: inline-block;
    margin-right: 2rem;
}

/* the list style image is used to replace
bullet point icons with images*/

/* just set the list style image to a 
image and then apply that class to the 
<ul> and all the decending <li> items 
will have that image as the bullet point */

/* we applied 3rem left padding bc, if we dont
apply it, the ticks are off the screen. */
.list--tick{
    list-style-image: url(../images/tick.svg);
    padding-left: 3rem;
}

/* should we change the padding or the 
margin?
experimenting is your friend paul. */
.list--tick .list__item{
padding-left: 0.5rem;
margin-bottom: 1rem;
}
 
/* you might not have a full plan 
of how you are going to make things 
work, when you start, but as you start
you want to put effort in solving, problms
which come across you. */

@media screen and (min-width: 1024px){
    .list--tick .list__item{
        padding-left: 0;
    }
}

/* step 6 icons */
.icon{
    width: 40px;
    height: 40px;
}

.icon--small{
    width: 30px;
    height: 30px;
}
 
/* the fill property only applies to 
svg images*/
.icon--primary{
    fill: var(--color-primary);
}

.icon--white{
    fill: #fff;
}
  
/* spans are inline elements 
width and height property does not apply 
to inline elements.
so we change the display to 
inline-block */

/* for aligning the icon at the center 
we change the inline-block to inline-flex */

/* we use justify content for horizontal alignment */
/* we use the align items for vertical alignment */
.icon-container{
    background: #f3f9fa;
    width: 64px;
    height: 64px;
    border-radius: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
}

.icon-container--accent{
    background: var(--color-accent);

}
/* step 7 */
/* The Buttons */

/* Button Structure */
.btn{
    font-size: 1.8rem;
    font-weight: 600;
    text-transform: uppercase;
    margin: 1rem 0;
    padding: 2rem 3rem;
    border: 0;
    border-radius: 40px;
    white-space: nowrap;
    cursor: pointer;
    text-align: center;
}

/* button skin */
.btn--primary {
background: var(--color-primary);
color: #fff;
}

.btn--primary:hover{
    background: black;
    transition: 0.3s;
} 


/* button secondary and hover */
.btn--secondary{
    background: var(--color-secondary);
    color: #fff;
}

.btn--secondary:hover{
    background: black;
    transition: 0.3s;
} 

/* button accent and hover */
.btn--accent{
    background: var(--color-accent);
    color: #fff;
}

.btn--accent:hover{
    background: black;
    transition: 0.3s;
} 


/* button white and hover*/
.btn--white{
    background: #fff;
    color: var(--color-headings);
    border: solid 1px;
}

.btn--white:hover{
    background: black;
    color: #fff;
    transition: 0.3s;
} 

/* a block button is a button which takes up the 
entire width space of the screen */
.btn--block{
  width: 100%;
  display: inline-block;
}

@media screen and (min-width:1024px) {
    .btn {
        font-size: 1.5rem;
    }
}
 

/* step 8 */
/* input component */
/* we set the outline to zero, to remove the browser border 
on input elements. */
.input{
    padding: 1.5rem 3.5rem;
    border: 1px solid var(--color-headings);
    border-radius: 1px solid var(--border-radius);
    outline: 0;
    color: var(--color-headings);
    font-size: 2rem;
}

/* This is a special code for placeholders */
::placeholder{
    color: #cdcbd7;
}

/* we set display to flex, to make the 
input component grow and take all the available 
space */
.input-group{
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    display: flex;
}

/* This input component now is a flex item since 
we set the parent div to display flex. 
when we set the flex grow to 1 it means take all the 
available space */
.input-group .input{
    border: 0;
    flex-grow: 1;
    padding: 1.5rem 1rem;
}

.input-group .btn{
    margin: 4px;
}


@media screen and (min-width:1024px) {
    .input{
        font-size: 1.5rem;
    }
}

 /* Card */
 .card {
     border-radius: 7px;
     /* first two zeros are for horizontal and vertical offset, 20px is for blurring
     the shadow, 10px for spreading the shadow, and then we have the colour. */
     box-shadow: 0 0 20px 10px #f3f3f3;
     /* the point we gave the whole .card div the border radius, we made the corners 
     round.
     and the point we gave the .card__header div a background colour, it grew larger
     than its parent, .card div, so it lost the round corners.
     THAT IS CALLED OVERFLOW. 
     so we set the overflow to hidden. */
     overflow: hidden;

 }
  
 /* think of the component like a human. 
 it has the skelaton, the flesh. focus on the skelaton first
 come to flesh later. */

 .card__header, 
 .card__body{
     padding: 2rem 3rem;
 }

 .card--primary .card__header {
   background: var(--color-primary);
   color: #fff;
 }

 .card--secondary .card__header {
    background: var(--color-secondary);
    color: #fff;
  }
 
.card--secondary .badge--secondary {
   background: #02cdf1;
}

  /* Plans */
.plan__name{
    color: #fff;
    margin: 0;
    font-weight: 500;
    font-size: 2.4rem;
}

.plan__price{
    font-size: 6rem;
}

.plan__billing-cycle{
    font-size: 2.4rem;
    font-weight: 300;
    opacity: .8;
}

/* How the hell do anyone remember all these numbers???
well you dont need to remember them.
Just know what you are trying to build and in the chrome 
dev tools you can experiment and get the values which suits
you... */

.plan__description {
    font-size: 2rem;
    font-weight: 300;
    letter-spacing: 1px;
    display: block;
}

.plan .list__item {
    margin-bottom: 2rem;
}

.plan--popular 

/* Notice how we only changed the font-size for this media 
query. */


/*relative and absolute positioning*/
/*to move a decendent element with absolute potioning
the parent */
.plan--popular .card__header{
    position: relative;
}

/* before the card header of the plan popular */
.plan--popular .card__header::before {
    content: url(../images/popular.svg);
    width: 40px;
    /* img element is a inline element, so we change the display 
    to inline block */
    display: inline-block;
    position: absolute;
     /* with negative pixels here we are moving the popular image 
     upwards */
    top: -6px;
    /* take 5% width from the right 
    (take 5% from the whole width of the card)  */
    right: 5%;
}

@media screen and (min-width: 1024px) {
    .plan__name {
        font-size: 1.4rem;
    }

    .plan__price {
        font-size: 5rem;
    }

    .plan__billing-cycle {
        font-size: 1.6rem;
    }

    .plan__description {
        font-size: 1.7rem;
    } 
}

/* popular badge */
 /* the text the colours, the background
 colour can be set with html and css, but for anything 
 extra, we use images and svg images */

/* media component */
.media {
    display: flex;
    /*when we set the display to flex, we can layout these 
    elements horizontally*/
}

/*when we inspect in chrome dev tools, we saw a unneccesary
margin top of 30px, so we set it to zero*/
.media__title{
    margin-top: 0;
}

.media__body {
    margin: 0 2rem;
}

.media__image {
    margin-top: 1rem;
}

/*Quote component*/
.quote {
    font-size: 3rem;
    font-style: italic;
    color: var(--color-body-darker);
    line-height: 1.3;
}

/*rather than writing the quotes in html we do this 
in css with these codes*/
 .quote__text::before {
     content: open-quote;
 }

 .quote__text::after {
    content: close-quote;
}

/*in web developing first we create 
components, then we create sections.*/

.quote__author{
    font-size: 3rem;
    font-weight: 500;
    font-style: normal;
    margin-bottom: 0;
}


/* why we have these codes is because we are trying our 
page to look like the photoshop model... 
without a model you dont build a page...
Have the complete picture of what you want to build...
build the components... 
then build the entire section... */
.quote__organization{
    color: var(--color-headings);
    opacity: .4;
    font-size: 2rem;
    font-style: normal;
}

.quote__line {
    position: relative;
    bottom: 10px;
}

@media screen and (min-width: 1024px) {
    .quote{
        font-size: 2rem;
    }
    .quote__author {
        font-size: 2.4rem;
    }
    .quote__organization {
        font-size: 1.6rem;
    }
}

/* Grid Component */
.grid{
    display: grid;
}

@media screen and (min-width: 768px) {
.grid--1x2 {
    grid-template-columns: repeat(2, 1fr);
}    
}

@media screen and (min-width: 1024px) {
    .grid--1x3 {
        grid-template-columns: repeat(3, 1fr);
    }    
    }


/* Testimonials */

.testimonial {
    padding: 3rem;
}

.testimonial__image {
    position: relative;
}

.testimonial__image {
    width: 100%;
}

.testimonial__image > .icon-container {
    position: absolute;
    top: 3rem;
    right: -32;
}

@media screen and (min-width: 768px) {
    .testimonial .quote,
    .testimonial .quote__author
    {
        font-size: 2.4rem;
    }

    .testimonial .quote {
        margin-left: 6rem;
    }
}
 





























































































 


