/* DRY principal in coding 
Dont repeat yourself */
/* In object oriented css we seperate
structure from skin
- The skin includes color of the text and
background color 
- The structure includes the structural 
codes */

/* Step 1 define the colour pallete of this site. */
:root{
    --color-primary: #2584ff;
    --color-secondary: #00d9ff;
    --color-accent: #ff3400;
    --color-headings: #1b0760;
    --color-body: #918ca4;
}


/* we select all elements, and all elements which are inserted
after and before them, and we set the box-sizing to border box
*/
*, 
*::after, 
*::before {
box-sizing: border-box;
}

/* Step 2 define the typography of this site */
/* text colour, font-family, font-size 
of the body, heading elements */

html{
    /* 62.5% of 16px = 10px */
    font-size: 62.5%;
}

body{
    font-family: Inter, Arial, Helvetica, sans-serif;
    color: var(--color-body);
    font-size: 2.4rem;
    line-height: 1.5;
}

h1, h2, h3 {
    color: var(--color-headings);
    margin-bottom: 1rem;
}

h1{
    font-size: 7rem;
}

h2{
    font-size: 4rem;
}

h3{
    font-size: 3rem;
}

p{
    margin-top: 0;
}

/* we start building the website 
focusing on mobile, then we write 
media queries for 768px (tablets)
and then 1024px (desktop) */

/* Font-sizes are larger for mobile 
screens, and font sizes are smaller for 
tablet and desktop screens, 
(idea, here is as the screen gets larger
the font-size, more content can fit in
so the font size gets smaller) */

@media screen and (min-width: 1024px){
body{
    font-size: 1.8rem;

}

h1{
    font-size: 8rem;
}

h2{
    font-size: 4rem;
}

h3{
    font-size: 2.4rem;
}
}

/* good thing,
 no one would ever have a problem if 
we reused these codes anywhere else */


/* Step 3 */
/* Complete a component of the site */
/* The links component */

a{
    text-decoration: none;
}

.link{
    color: var(--color-accent);
    text-transform: uppercase;
    font-size: 2rem;
    font-weight: bold;
    padding: .9rem;
    border-radius: 2rem;
}     

.link:hover{
    color: black;
    background-color: var(--color-accent);
    border-radius: 2rem;
    transition: 0.3s;
   padding: .9rem;

}

@media screen and (min-width:1024px) {
    .link{
        font-size: 1.5rem;
        
    }
}

/* Step 4 */
/* Focusing on another component */
/* the badge component */

/* in web development, see the smallest
thing you can build in the site, then 
start from there... */

/* what gives us the exact values for 
font sizes, padding, margin, is 
EXPERIMENTATION... JUST EXPERIMENT YOURSELF
AND FIND IT. THATS IT. */


/* this is the structure of the badge */
.badge{
    border-radius: 20px;
    padding: .5rem 2rem;
    font-weight: bold;
    white-space: nowrap;
    font-size: 2rem;
}

/* These are the skins */
.badge--primary{
    background: var(--color-primary);
    color: #fff;
}

.badge--secondary{
    background: var(--color-secondary);
    color: #fff;
}

.badge--small{
    font-size: 1.6rem;
}

/* this is the media query */
@media screen and (min-width: 1024px) {
    .badge{
        font-size: 1.5rem;

    }

    .badge--small{
        font-size: 1.2rem;
    }
}

/* step 5 List component */
/* - setting the list style to none, 
gets rid of the default bullet points */

/* - padding left we set to zero 
to get rid of the padding which all browsers 
are applied to by default */

.list{
    list-style: none;
    padding-left: 0;
    color: var(--color-headings);
}

/* this means, if we have a list item
inside the list--inline we want to display
it as inline-block, 
(if we set this to inline only 
we wont be able to give it margin) */
.list--inline .list__item{
    display: inline-block;
    margin-right: 2rem;
}

/* the list style image is used to replace
bullet point icons with images*/

/* just set the list style image to a 
image and then apply that class to the 
<ul> and all the decending <li> items 
will have that image as the bullet point */

/* we applied 3rem left padding bc, if we dont
apply it, the ticks are off the screen. */
.list--tick{
    list-style-image: url(../images/tick.svg);
    padding-left: 3rem;
}

/* should we change the padding or the 
margin?
experimenting is your friend paul. */
.list--tick .list__item{
padding-left: 0.5rem;
margin-bottom: 1rem;
}
 
/* you might not have a full plan 
of how you are going to make things 
work, when you start, but as you start
you want to put effort in solving, problms
which come across you. */

@media screen and (min-width: 1024px){
    .list--tick .list__item{
        padding-left: 0;
    }
}

/* step 6 icons */
.icon{
    width: 40px;
    height: 40px;
}

/* the fill property only applies to 
svg images*/
.icon--primary{
    fill: var(--color-primary);
}

/* spans are inline elements 
width and height property does not apply 
to inline elements.
so we change the display to 
inline-block */

/* for aligning the icon at the center 
we change the inline-block to inline-flex */

/* we use justify content for horizontal alignment */
/* we use the align items for vertical alignment */
.icon-container{
    background: #f3f9fa;
    width: 64px;
    height: 64px;
    border-radius: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
}


/* step 7 */
/* The Buttons */

/* Button Structure */
.btn{
    font-size: 1.8rem;
    font-weight: 600;
    text-transform: uppercase;
    margin: 1rem 0;
    padding: 2rem 3rem;
    border: 0;
    border-radius: 40px;
    white-space: nowrap;
    cursor: pointer;
    text-align: center;
}

/* button skin */
.btn--primary {
background: var(--color-primary);
color: #fff;
}

.btn--primary:hover{
    background: black;
    transition: 0.3s;
} 


/* button secondary and hover */
.btn--secondary{
    background: var(--color-secondary);
    color: #fff;
}

.btn--secondary:hover{
    background: black;
    transition: 0.3s;
} 

/* button accent and hover */
.btn--accent{
    background: var(--color-accent);
    color: #fff;
}

.btn--accent:hover{
    background: black;
    transition: 0.3s;
} 


/* button white and hover*/
.btn--white{
    background: #fff;
    color: var(--color-headings);
    border: solid 1px;
}

.btn--white:hover{
    background: black;
    color: #fff;
    transition: 0.3s;
} 

/* a block button is a button which takes up the 
entire width space of the screen */
.btn--block{
  width: 100%;
  display: inline-block;
}

@media screen and (min-width:1024px) {
    .btn {
        font-size: 1.5rem;
    }
}

/* next is lesson15 */





































 


